{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { switchMap } from 'rxjs/operators';\nimport { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./workflow-tracker.service\";\nimport * as i3 from \"./department.service\";\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    http;\n    workflowTrackerService;\n    departmentService;\n    constructor(http, workflowTrackerService, departmentService) {\n      this.http = http;\n      this.workflowTrackerService = workflowTrackerService;\n      this.departmentService = departmentService;\n    }\n    getAll() {\n      return this.http.get(`${environment.apiUrl}/employees`);\n    }\n    getById(id) {\n      return this.http.get(`${environment.apiUrl}/employees/${id}`);\n    }\n    create(employee) {\n      return this.http.post(`${environment.apiUrl}/employees`, employee);\n    }\n    update(id, employee) {\n      // First get the current employee to check for department change\n      return this.getById(id).pipe(switchMap(currentEmployee => {\n        // If department has changed, create a workflow entry\n        if (currentEmployee.departmentId !== employee.departmentId) {\n          // Get both department names for the workflow record\n          return forkJoin({\n            oldDept: this.departmentService.getById(currentEmployee.departmentId),\n            newDept: this.departmentService.getById(employee.departmentId)\n          }).pipe(switchMap(depts => {\n            // Track the department change with department names\n            this.workflowTrackerService.trackDepartmentChange(id, currentEmployee.departmentId, employee.departmentId, depts.oldDept.name, depts.newDept.name).subscribe({\n              error: error => console.error('Error tracking department change:', error)\n            });\n            // Continue with the employee update\n            return this.http.put(`${environment.apiUrl}/employees/${id}`, employee);\n          }));\n        } else {\n          // No department change, just update the employee\n          return this.http.put(`${environment.apiUrl}/employees/${id}`, employee);\n        }\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${environment.apiUrl}/employees/${id}`);\n    }\n    static ɵfac = function EmployeeService_Factory(t) {\n      return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.WorkflowTrackerService), i0.ɵɵinject(i3.DepartmentService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EmployeeService,\n      factory: EmployeeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}