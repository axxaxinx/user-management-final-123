{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { tap, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./workflow-tracker.service\";\nexport let RequestService = /*#__PURE__*/(() => {\n  class RequestService {\n    http;\n    workflowTrackerService;\n    constructor(http, workflowTrackerService) {\n      this.http = http;\n      this.workflowTrackerService = workflowTrackerService;\n    }\n    getAll() {\n      return this.http.get(`${environment.apiUrl}/requests`);\n    }\n    getById(id) {\n      return this.http.get(`${environment.apiUrl}/requests/${id}`);\n    }\n    create(request) {\n      // Use the HTTP POST to create the request\n      return this.http.post(`${environment.apiUrl}/requests`, request).pipe(\n      // After the request is created successfully, track it\n      tap(createdRequest => {\n        // Make sure we have the necessary data for tracking\n        if (createdRequest && createdRequest.id && createdRequest.employeeId) {\n          // Create a workflow entry for the new request\n          this.workflowTrackerService.trackRequestSubmission(createdRequest.employeeId, createdRequest.id, createdRequest.type).subscribe({\n            next: () => console.log('Workflow updated for new request'),\n            error: error => console.error('Error tracking request submission:', error)\n          });\n        } else {\n          console.error('Cannot track request submission: Missing data in created request', createdRequest);\n        }\n      }));\n    }\n    update(id, request) {\n      // First get the current request data to check for status changes\n      return this.getById(id).pipe(switchMap(currentRequest => {\n        // If status has changed, create a workflow entry\n        if (currentRequest.status !== request.status) {\n          this.workflowTrackerService.trackRequestStatusChange(request.employeeId, id, currentRequest.status, request.status, request.type).subscribe({\n            next: () => console.log('Workflow updated for status change'),\n            error: error => console.error('Error tracking status change:', error)\n          });\n        }\n        // Continue with the request update\n        return this.http.put(`${environment.apiUrl}/requests/${id}`, request);\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${environment.apiUrl}/requests/${id}`);\n    }\n    static ɵfac = function RequestService_Factory(t) {\n      return new (t || RequestService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.WorkflowTrackerService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RequestService,\n      factory: RequestService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return RequestService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}